openapi: 3.0.0
info:
  title: Friends Network API
  description: API for managing user friends
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the new user
                  example: johndoe
                password:
                  type: string
                  description: The password of the new user
                  example: password123
              required:
                - username
                - password
      responses:
        '201':
          description: User signed up successfully
        '400':
          description: Invalid request body
  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                  example: johndoe
                password:
                  type: string
                  description: The password of the user
                  example: password123
              required:
                - username
                - password
      responses:
        '201':
          description: User signed in successfully
        '400':
          description: Invalid request body
  /logout:
    post:
      summary: Log out user
      responses:
        '204':
          description: None
        '400':
          description: Invalid request body
  /profile:  
    get:
      summary: Get user's info
      responses:
        '200':
          description: Authenticated user's info
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Authenticated user's ID
                      example: 1
                    username:
                      type: string
                      description: Name of the authenticated user
                      example: janedoe
  
  /profile/friends:
    get:
      summary: Get a list of friends for a user
      responses:
        '200':
          description: A list of friends for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: The ID of the friend
                      example: 1
                    username:
                      type: string
                      description: The username of the friend
                      example: janedoe
  /profile/friends/{userId}:
    get:
      summary: Get the friendship status between two users
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the target user
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The friendship status between two users
          content:
            application/json:
              schema:
                type: object
                properties:
                  friendship_status:
                    type: string
                    description: The current friendship status between the users
                    enum:
                      - pending_outgoing
                      - pending_incoming
                      - accepted
                      - none
    post:
      summary: Send a friend request to another user
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the requesting user
          schema:
            type: integer
            format: int64
        - in: query
          name: friendId
          required: true
          description: The ID of the user to send the request to
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Friend request sent successfully
        '400':
          description: Invalid request parameters
        '404':
          description: User not found
    delete:
      summary: Delete a friend from a user's friend list
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Friend deleted successfully
        '404':
          description: User or friend not found
  
  /profile/friendships:
    get:
      summary: Get a list of incoming and outgoing friend requests for a user
      responses:
        '200':
          description: A list of incoming and outgoing friend requests for the user
          content:
            application/json:
              schema:
                type: array
                description: A list of incoming friend requests for the user
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: The ID of the friend request
                      example: 1
                    from_user_id:
                      type: integer
                      format: int64
                      description: The ID of the user who sent the request
                      example: 2
                    to_user_id:
                      type: integer
                      format: int64
                      description: The ID of the user who received the request
                      example: 3
                    status:
                      type: string
                      description: The current status of the friend request
                      enum:
                        - pending_outgoing
                        - pending_incoming
                        - accepted
                        - none
    post:
      summary: Accept incoming friend requests and make users friends
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - friend_id
              properties:
                user_id:
                  type: integer
                  description: The ID of the user who received the friend request
                  example: 1
                friend_id:
                  type: integer
                  description: The ID of the user who sent the friend request
                  example: 2
      responses:
        '200':
          description: Users are now friends
        '400':
          description: Invalid request parameters
        '404':
          description: User or friend request not found
        '409':
          description: Users are already friends or friend request was already accepted
  
  
  
  
  
